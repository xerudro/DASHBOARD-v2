---
# VIP Hosting Panel - Initial Server Provisioning
# This playbook performs initial setup on a freshly provisioned Hetzner Cloud server

- name: Initial Server Provisioning
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Default SSH port
    ssh_port: 22
    # Timezone
    timezone: "UTC"
    # Swap size in MB (0 to disable)
    swap_size_mb: 2048
    # UFW default policy
    ufw_default_incoming: deny
    ufw_default_outgoing: allow
    # Fail2ban settings
    fail2ban_bantime: 3600
    fail2ban_maxretry: 5
    fail2ban_findtime: 600

  tasks:
    - name: Wait for system to become reachable
      wait_for_connection:
        timeout: 300

    - name: Gather facts
      setup:

    - name: Set timezone
      timezone:
        name: "{{ timezone }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Perform full system upgrade
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      register: upgrade_result

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - net-tools
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - ufw
          - fail2ban
          - unattended-upgrades
          - python3
          - python3-pip
        state: present

    - name: Create swap file if needed
      when: swap_size_mb > 0
      block:
        - name: Check if swap file exists
          stat:
            path: /swapfile
          register: swap_file

        - name: Create swap file
          command: fallocate -l {{ swap_size_mb }}M /swapfile
          when: not swap_file.stat.exists

        - name: Set swap file permissions
          file:
            path: /swapfile
            mode: '0600'
          when: not swap_file.stat.exists

        - name: Make swap
          command: mkswap /swapfile
          when: not swap_file.stat.exists

        - name: Enable swap
          command: swapon /swapfile
          when: not swap_file.stat.exists

        - name: Add swap to fstab
          lineinfile:
            path: /etc/fstab
            line: '/swapfile none swap sw 0 0'
            state: present
          when: not swap_file.stat.exists

    - name: Configure sysctl for better performance
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'vm.vfs_cache_pressure', value: '50' }
        - { name: 'net.core.somaxconn', value: '1024' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '2048' }
        - { name: 'net.ipv4.tcp_tw_reuse', value: '1' }

    - name: Configure UFW firewall
      block:
        - name: Set UFW default incoming policy
          ufw:
            direction: incoming
            policy: "{{ ufw_default_incoming }}"

        - name: Set UFW default outgoing policy
          ufw:
            direction: outgoing
            policy: "{{ ufw_default_outgoing }}"

        - name: Allow SSH
          ufw:
            rule: allow
            port: "{{ ssh_port }}"
            proto: tcp

        - name: Allow HTTP
          ufw:
            rule: allow
            port: '80'
            proto: tcp

        - name: Allow HTTPS
          ufw:
            rule: allow
            port: '443'
            proto: tcp

        - name: Enable UFW
          ufw:
            state: enabled

    - name: Configure Fail2ban
      block:
        - name: Create Fail2ban local jail
          copy:
            dest: /etc/fail2ban/jail.local
            content: |
              [DEFAULT]
              bantime = {{ fail2ban_bantime }}
              findtime = {{ fail2ban_findtime }}
              maxretry = {{ fail2ban_maxretry }}

              [sshd]
              enabled = true
              port = {{ ssh_port }}
              logpath = %(sshd_log)s
              backend = %(sshd_backend)s

        - name: Restart Fail2ban
          service:
            name: fail2ban
            state: restarted
            enabled: yes

    - name: Configure automatic security updates
      block:
        - name: Configure unattended-upgrades
          template:
            src: templates/50unattended-upgrades.j2
            dest: /etc/apt/apt.conf.d/50unattended-upgrades
          when: false  # Template needs to be created

        - name: Enable automatic updates
          copy:
            dest: /etc/apt/apt.conf.d/20auto-upgrades
            content: |
              APT::Periodic::Update-Package-Lists "1";
              APT::Periodic::Download-Upgradeable-Packages "1";
              APT::Periodic::AutocleanInterval "7";
              APT::Periodic::Unattended-Upgrade "1";

    - name: Secure SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
      notify: Restart SSH

    - name: Create deployment user
      user:
        name: deploy
        groups: sudo
        shell: /bin/bash
        create_home: yes
      when: create_deploy_user | default(false)

    - name: Install monitoring tools
      apt:
        name:
          - sysstat
          - iotop
          - iftop
          - ncdu
        state: present

    - name: Clean up
      apt:
        autoremove: yes
        autoclean: yes

    - name: Reboot if required
      reboot:
        msg: "Reboot initiated by Ansible after system upgrade"
        reboot_timeout: 300
      when: upgrade_result.changed and (reboot_after_upgrade | default(false))

  handlers:
    - name: Restart SSH
      service:
        name: sshd
        state: restarted
